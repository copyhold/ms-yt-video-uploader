name: Build and Release

on:
  push:
    branches:
      - "master"
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: ${{ runner.os }} on ${{ runner.arch }}
        run: echo "${{ runner.os }} on ${{ runner.arch }}"
      - if: runner.os != 'macOS' || runner.arch != 'ARM64'
        uses: FedericoCarboni/setup-ffmpeg@v3
      - if: runner.os == 'macOS' && runner.arch == 'ARM64'
        run: brew install ffmpeg

      # --- Common Steps ---
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install google-api-python-client google-auth-httplib2 google-auth-oauthlib

      - name: Create client_secret.json
        shell: bash
        run: |
          echo "${{ secrets.CLIENT_SECRET_JSON }}" > client_secret.json

      - name: Build executable with PyInstaller
        shell: bash
        run: |
          pyinstaller --name "SermonUploader" \
                      --onefile \
                      --windowed \
                      --add-data "client_secret.json:." \
                      app.py
      
      # Rename the output file to the consistent artifact name we defined in the matrix
      - name: Rename Artifact
        shell: bash
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            mv dist/SermonUploader.exe dist/${{ matrix.artifact_name }}
          else
            mv dist/SermonUploader dist/${{ matrix.artifact_name }}
          fi

      # Upload the consistently named executable as an artifact
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/${{ matrix.artifact_name }}
          if-no-files-found: error # We expect a file, so fail if it's missing

  # ===============================================================
  #  JOB 2: Create a GitHub Release and upload build assets
  # ===============================================================
  create_release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create a release

    steps:
      # Step 1: Download all the artifacts (executables) from the 'build' job
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          # Download into a single directory named 'release-assets'
          path: release-assets

      # Step 2: Create the release and upload all files from the 'release-assets' directory
      - name: Create Release and Upload Assets
        uses: ncipollo/release-action@v1
        with:
          # This is the path to the files to upload. The wildcard '**/*' uploads all files in all subdirectories.
          artifacts: "release-assets/**/*"
          # This token is provided by GitHub Actions automatically.
          token: ${{ secrets.GITHUB_TOKEN }}
          # Automatically generate release notes from commits since the last release.
          generateReleaseNotes: true