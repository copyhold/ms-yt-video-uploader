name: Build and Release

on:
  push:
    branches:
      - "master"
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: ${{ runner.os }} on ${{ runner.arch }}
        run: echo "${{ runner.os }} on ${{ runner.arch }}"
      - if: runner.os != 'macOS' || runner.arch != 'ARM64'
        uses: FedericoCarboni/setup-ffmpeg@v3
      - if: runner.os == 'macOS' && runner.arch == 'ARM64'
        run: brew install ffmpeg

      # --- Common Steps ---
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install google-api-python-client google-auth-httplib2 google-auth-oauthlib

      - name: Create client_secret.json
        shell: bash
        run: |
          echo "${{ secrets.CLIENT_SECRET_JSON }}" > client_secret.json

      # --- UNIFIED BUILD COMMAND ---
      # We no longer need to bundle ffmpeg.exe on Windows because setup-ffmpeg adds it to the PATH.
      # This means the build command is now identical for all platforms.
      - name: Build executable with PyInstaller
        # Use a platform-agnostic shell and command
        shell: bash 
        run: |
          # The path separator for --add-data is ":" for bash on all platforms
          pyinstaller --name "SermonUploader" \
                      --onefile \
                      --windowed \
                      --add-data "client_secret.json:." \
                      app.py

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: SermonUploader-${{ matrix.os }}
          path: |
            dist/SermonUploader.exe
            dist/SermonUploader
          if-no-files-found: ignore

  # ===============================================================
  #  JOB 2: Create a GitHub Release and upload build assets
  # ===============================================================
  create_release:
    # This job only runs when a tag is pushed, not on every push to 'main'.
    # The `startsWith` condition checks the Git reference.
    if: startsWith(github.ref, 'refs/tags/v')
    
    # This job depends on the 'build' job completing successfully for all matrix platforms.
    needs: build
    
    runs-on: ubuntu-latest
    permissions:
      contents: write # This permission is required to create a release and upload assets.

    steps:
      # Step 1: Create the initial Release entry.
      # This generates automatic release notes and gives us a URL to upload assets to.
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: "See below for platform-specific downloads."
          draft: false
          prerelease: false

      # Step 2: Download all the artifacts (executables) that the 'build' job created.
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          # The path where artifacts will be downloaded. Each artifact will be in its own subdirectory.
          path: artifacts

      # Step 3: Upload each artifact as a release asset.
      - name: Upload Windows Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/SermonUploader-windows-latest/SermonUploader.exe
          asset_name: SermonUploader-windows-x64.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload macOS Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/SermonUploader-macos-latest/SermonUploader
          asset_name: SermonUploader-macos-x64
          asset_content_type: application/octet-stream

      - name: Upload Linux Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/SermonUploader-ubuntu-latest/SermonUploader
          asset_name: SermonUploader-linux-x64
          asset_content_type: application/octet-stream